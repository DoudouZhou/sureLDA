
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # install.packages(c("randomForest","data.table","topicmodels"), repos = "http://cran.us.r-project.org")
> 
> library(Matrix)
> library(flexmix)
Loading required package: lattice
> library(stats)
> library(abind)
> library(Cairo)
> library(glmnet)
Loading required package: foreach
Loaded glmnet 2.0-18

> library(PRROC)
> library(Rcpp)
> library(tidyr)

Attaching package: ‘tidyr’

The following objects are masked from ‘package:Matrix’:

    expand, pack, unpack

> library(tidytext)
> library(bindata) ##For Multiple Y
> library(reliaR)  ##For log.gamma
> 
> source('sureLDA.R')
> 
> 
> Simulate<-function(N=10000,K=10,M=50){
+   ##Generate Paramters
+   Alpha <- rep(0.3,K)
+   Beta <- rep(0.25,K)
+   Lambda <- matrix(rep(0.2,M*K-2*K))
+ 
+   mu_positive <- rbind(
+     t(sapply(1:5,function(o) c(4.5,2.1,seq(1.9,1.7,length=M-2)))),
+     t(sapply(6:K,function(o) c(4.5,2.1,seq(1.9,1.7,length=M-2)))) )
+   mu_negative <- rbind(
+     t(sapply(1:5,function(o) c(0.51,0.81,seq(0.85,0.82,length=M-2)))),
+     t(sapply(6:K,function(o) c(0.51,0.81,seq(0.85,0.81,length=M-2)))) )
+   
+   ##Prior Probability of Y
+   Pi <- c(0.4,0.2,0.15,0.13,0.1,0.03,0.03,0.03,0.03,0.03)
+ 
+   ##Correlation of Multiple Y
+   sigma <- matrix(0, K, K)
+   sigma[1,2] <- 0.5
+   sigma[2,1] <- 0.5
+   diag(sigma)<-1
+   ##Generate Y
+   Y <- rmvbin(N, margprob=Pi, sigma=sigma)
+   Y_table = apply(Y,1,function(x){t(2^(0:(K-1)))%*%t(t(x))})
+   table(Y_table)
+   length(table(Y_table))
+   
+   ##Generate X
+   H <- rpois(N,lambda = 2)
+   random <- t(apply(Y,1,function(y){
+     t(sapply(1:K, function(i){
+       yi = y[i]
+       if(yi==1) rgamma(M, scale=mu_positive[i,], shape=1)
+       else rgamma(M, scale=mu_negative[i,], shape=1)
+     }))
+   }))
+   
+   logX <- cbind(log(H+1)%*%t(Alpha),log(H+1)%*%t(Beta),log(H+1)%*%t(Lambda)) + log(random)
+   X <- floor(exp(logX))
+   ICD <- X[,1:K] 
+   X <- cbind(H,X)
+   colnames(X) <- c('H',paste('ICD',1:K,sep=''),paste('NLP',1:K,sep=''),paste('V',1:(M*K-2*K),sep=''))
+   ##Filter is defined as ICD >= 1
+   filter <- I(ICD>=1)*1
+   
+   i = 1
+   for(i in 1:K){
+     print(table(filter[,i],Y[,i],dnn=c(paste('filter',i,sep=''),paste('Diseases',i,sep='')))/N)
+   }
+   list(X=X,Y=Y,filter=filter)
+ }
> 
> 
> N=10000  ##Number of patients
> K=10     ##Number of diseases
> M=50     ##Number of features for each diseases, two of them are ICD and NLP.
> Sim <- Simulate(N,K,M)
       Diseases1
filter1      0      1
      0 0.4570 0.0602
      1 0.1458 0.3370
       Diseases2
filter2      0      1
      0 0.6221 0.0315
      1 0.1819 0.1645
       Diseases3
filter3      0      1
      0 0.6586 0.0236
      1 0.1959 0.1219
       Diseases4
filter4      0      1
      0 0.6622 0.0191
      1 0.2033 0.1154
       Diseases5
filter5      0      1
      0 0.6924 0.0152
      1 0.2124 0.0800
       Diseases6
filter6      0      1
      0 0.7416 0.0042
      1 0.2300 0.0242
       Diseases7
filter7      0      1
      0 0.7447 0.0044
      1 0.2236 0.0273
       Diseases8
filter8      0      1
      0 0.7440 0.0047
      1 0.2272 0.0241
       Diseases9
filter9      0      1
      0 0.7440 0.0045
      1 0.2251 0.0264
        Diseases10
filter10      0      1
       0 0.7413 0.0041
       1 0.2274 0.0272
> X <- Sim$X
> Y <- Sim$Y
> filter <-Sim$filter 
> diseases <- seq(K)
> HU <- Sim$X[,1]
> ICD <- Sim$X[,2:11]
> NLP <- Sim$X[,12:21]
> nPatients = N
> weight <- rep(1,(K*M))
> 
> surelda_run <- sureLDA(X,weight,ICD,NLP,HU,filter)
Error in lda_rcpp(d, w, z, weight, prior, alpha, beta, D, knowndiseases,  : 
  Not a matrix.
Calls: sureLDA -> lda_rcpp -> .Call
Execution halted
